type Query {
    login(input: LoginUserInput!): AuthPayload!
    currentUser: User
    activitiesInClass(classId: ID!): [Activity!]!
    students: [Student!]!
}

type Mutation {
    lockUnlockActivity(lockUnlockActivityInput: LockUnlockActivityInput!): Boolean!
}

input LoginUserInput {
    email: String!
    password: String!
}

type AuthPayload {
    token: String!
    code: Int
    message: String
    name: String
}

type User {
    uuid: ID!
    name: String!
    email: String!
}

type Activity {
    uuid: ID!
    name: String!
    description: String!
    completionPercentage: Int!
    classId: String!
}

type StudentActivity {
    uuid: ID!
    status: ActivityStatus!
}

type Student {
    uuid: ID!
    name: String!
    activities: [StudentActivity!]!
}

enum ActivityStatus {
    COMPLETED
    LOCKED
    UNLOCKED
}

input LockUnlockActivityInput {
    studentId: ID!
    activityId: ID!
    status: ActivityStatus!
}

schema {
    query: Query
    mutation: Mutation
}
